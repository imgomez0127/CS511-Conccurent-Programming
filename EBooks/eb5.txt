Q1.
Semaphore man_can_go_in = Semaphore(0);
Semaphore grab_shit = Semaphore(1);
bool itGotLate = false;
thread Man: {
    grab_shit.acquire();
        if !itGotLate{
	        man_can_go_in.acquire();
	        man_can_go_in.acquire();
        }
    grab_shit.release();
}

thread Woman: {
	man_can_go_in.release();
}

itGotLate(){
    itGotLate = true;
    ticket.release();
    ticket.release(); 
    // could just also be a while true release and dont edit man
}

Q2.
Semaphore mutexM = new Semaphore(1);
Semaphore mutexW = new Semaphore(1);
thread Man:{
    mutexM.acquire();
    men++;
    if(men == 1){
        mutexW.acquire();
    }
    mutexM.release()

    mutexM.acquire()
    men--;    
    if(men == 0){
        mutexW.release();
    }
    mutexM.release();
    
}
thread Woman:{
    same as man but replace all mutexM with mutexW and vice versa 
}

Q3.
//Assuming capacity N = 5 
Semaphore[] able_to_board = [new Semaphore(0),newSemaphore(0)];
Semaphore[] able_to_depart = [new Semaphore(0), new Semaphore(0)];
Semaphore[] able_to_unboard = [new Semaphore(0). new Semaphore(0)];
Semaphore[] able_to_allow_boarding = [new Semaphore(0), new Semaphore(0)];
thread Boat:{
    coast = 0
    while(true){
        //allow 5 ppl to board
        for i in range(N):
            able_to_board[coast].release();
        //wait for all 5 to board
        for i in range(N):
            able_to_depart[coast].acquire(); 
        //allow 5 ppl to unboard
        for i in range(N)
            able_to_unboard[coast].release();
        //wait for all 5 to board
        for i in range(N):
            able_to_allow_boarding[coast].acquire(); 
        coast = 1 - coast
    }
}
//assume multiple passengers are instantiated
thread Passenger(i):{
        able_to_board[i].acquire();
        able_to_depart[i].release();
        able_to_unboard[i].acquire();
        able_to_allow_boarding[i].release();
} 
Q5.
waitForBlast S(0)
waitForRinse S(0)
waitForDry S(0)
doBlast S(0,true)
doRinse S(0,true)
doDry S(0,true)
queueBlast S(0)
queueRinse S(0)
queueDry S(0)
thread Blast:{
    while(true){
        //waits for something to get in
        queueBlast.acquire();
        //blast
        waitForBlast.release(); 
    }
}
thread Rinse:{
    while(true){
        //waits for something to get in
        queueRinse.acquire();
        //rinse
        waitForRinse.release();
    }
}
thread Dry:{
    while(true){
        //waits for something to get in
        queueDry.acquire();
        //waits for something to get in
        waitForDry.release();
    }
}
thread Car:{
        //queue up for getting in
        queueBlast.release();
        //wait for turn enter and wait for blast 
        waitForBlast.acquire();
        //queue up for getting in 
        queueRinse.acquire();
        //wait for turn enter and wait for rinse
        waitForRinse.acquire();
        //queue up for drying
        queueDry.acquire();
        //wait for turn enter and wait for rinse
        waitForDry.release(); 
}
Q6.
availableBeds = S(4)
availableMagazines = S(10)
mutex = S(1)
mutex2 = S(1)
bedsAvailable = 4
thread acquireBed:{
    mutex.acquire()
        availableBeds.acquire();
        bedsAvailable--
    mutex.release()
    Thread.sleep(random.randint(10))
    mutex2.acquire()
        availabledBeds.release();
        bedsAvailable++
    mutex2.release()
}
thread acquireMagazine:{
    while(bedsAvailable == 0){
        availableMagazines.acquire()
        //read
        availableMagazines.release()
    }
}
Q8.
part A.
Semaphore disableOppositeMovement = new Semaphore(1);
Semaphore mutexForward = new Semaphore(1);
Semaphore mutexBackward = new Semaphore(1);
int amountGoingForward = 0;
int amountGoingBackward = 0;
thread Vehicle(myEndpoint):{
    if(myEndpoint == 0){
        mutexForward.acquire();
        amountGoingForward++; 
        if(amountGoingForward == 1){
            disableOppositeMovement.acquire();
        }
        mutexForward.release();
        //Drive bitch drive
        mutexForward.acquire();
        amountGoingForward--;
        if(amountGoingForward == 0){
            disableOppositeMovement.release();
        }
        mutexForward.release(); 
    }
    else{
        //do the same as myEndpoint == 0 but change all forwards with backwards and vice versa
    }
}

Part B:
add another mutex to allow only 3 cars to go into the driving section
Part C:
No
